diff --git clients/rospy/src/rospy/impl/registration.py clients/rospy/src/rospy/impl/registration.py
index c29913b..1135a25 100644
--- clients/rospy/src/rospy/impl/registration.py
+++ clients/rospy/src/rospy/impl/registration.py
@@ -306,6 +306,8 @@ class RegManager(RegistrationListener):
                 if cond is not None:
                     cond.release()
 
+            get_topic_manager().check_all()
+
             #call _connect_topic on all URIs as it can check to see whether
             #or not a connection exists.
             if uris and not self.handler.done:
diff --git clients/rospy/src/rospy/topics.py clients/rospy/src/rospy/topics.py
index eb84b1f..b61a4ec 100644
--- clients/rospy/src/rospy/topics.py
+++ clients/rospy/src/rospy/topics.py
@@ -109,6 +109,10 @@ Message = genpy.Message
 # for interfacing with topics, while _TopicImpl implements the
 # underlying connection details. 
 
+if not hasattr(select, 'EPOLLRDHUP'):
+    select.EPOLLRDHUP = 0x2000
+
+
 class Topic(object):
     """Base class of L{Publisher} and L{Subscriber}"""
     
@@ -188,25 +192,28 @@ class Poller(object):
     on multiple platforms.  NOT thread-safe.
     """
     def __init__(self):
-        try:
+        if hasattr(select, 'epoll'):
+            self.poller = select.epoll()
+            self.add_fd = self.add_epoll
+            self.remove_fd = self.remove_epoll
+            self.error_iter = self.error_epoll_iter
+        elif hasattr(select, 'poll'):
             self.poller = select.poll()
             self.add_fd = self.add_poll
             self.remove_fd = self.remove_poll
             self.error_iter = self.error_poll_iter
-        except:
-            try:
-                # poll() not available, try kqueue
-                self.poller = select.kqueue()
-                self.add_fd = self.add_kqueue
-                self.remove_fd = self.remove_kqueue
-                self.error_iter = self.error_kqueue_iter
-                self.kevents = []
-            except:
-                #TODO: non-Noop impl for Windows
-                self.poller = self.noop
-                self.add_fd = self.noop
-                self.remove_fd = self.noop
-                self.error_iter = self.noop_iter
+        elif hasattr(select, 'kqueue'):
+            self.poller = select.kqueue()
+            self.add_fd = self.add_kqueue
+            self.remove_fd = self.remove_kqueue
+            self.error_iter = self.error_kqueue_iter
+            self.kevents = []
+        else:
+            #TODO: non-Noop impl for Windows
+            self.poller = self.noop
+            self.add_fd = self.noop
+            self.remove_fd = self.noop
+            self.error_iter = self.noop_iter
 
     def noop(self, *args):
         pass
@@ -228,6 +235,18 @@ class Poller(object):
             if event & (select.POLLHUP | select.POLLERR):
                 yield fd
 
+    def add_epoll(self, fd):
+        self.poller.register(fd, select.EPOLLHUP|select.EPOLLERR|select.EPOLLRDHUP)
+
+    def remove_epoll(self, fd):
+        self.poller.unregister(fd)
+
+    def error_epoll_iter(self):
+        events = self.poller.poll(0)
+        for fd, event in events:
+            if event & (select.EPOLLHUP | select.EPOLLERR | select.EPOLLRDHUP):
+                yield fd
+
     def add_kqueue(self, fd):
         self.kevents.append(select.kevent(fd))
 
@@ -439,6 +458,17 @@ class _TopicImpl(object):
             
             return True
 
+    def check(self):
+        fds_to_remove = list(self.connection_poll.error_iter())
+        if fds_to_remove:
+            with self.c_lock:
+                new_connections = self.connections[:]
+                to_remove = [x for x in new_connections if x.fileno() in fds_to_remove]
+                for x in to_remove:
+                    rospydebug("removing connection to %s, connection error detected"%(x.endpoint_id))
+                    self._remove_connection(new_connections, x)
+                self.connections = new_connections
+
     def remove_connection(self, c):
         """
         Remove connection from topic.
@@ -1136,6 +1166,15 @@ class _TopicManager(object):
                 t.close()
             self.pubs.clear()
             self.subs.clear()        
+
+            
+    def check_all(self):
+        """
+        Check all registered publication and subscriptions.
+        """
+        with self.lock:
+            for t in chain(iter(self.pubs.values()), iter(self.subs.values())):
+                t.check()
         
     def _add(self, ps, rmap, reg_type):
         """
